/*
  Highly divisible triangular number
  Problem 12
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
*/


/* trying a brute approach first. it will probably be SUPER slow... */

/* count number of divisors of n.
   on 1st attempt I was starting at n/2 .. 1, but it was TOO slow.
   we can start at sqrt(n) and count each divisor as 2, as there's a corresponding divisor on the
   "other side" of the sqrt. this speeds things up a lot.
*/
let count_divisors n => {
  let rec cd n div count => {
    if (div <= 1) { count }
    else if ((n mod div) == 0) { cd n (pred div) (count + 2) }
    else { cd n (pred div) count }
  };
  /* int_of_float truncates the number, effectively flooring it (floor is not working as expected...) */
  let sqrtn = int_of_float (sqrt (float_of_int n));
  /* perfect squares have an odd number of divisors, so we subtract 1 to adjust the count */
  if (sqrtn*sqrtn == n) { cd n sqrtn 1 }
  else { cd n sqrtn 2 }
};

let find_triangle => {
  let rec ft i triangle => {
    if ((count_divisors triangle) > 500) { triangle }
    else { ft (succ i) (triangle + i) }
  };
  ft 1 0;
};

print_int (find_triangle ());
